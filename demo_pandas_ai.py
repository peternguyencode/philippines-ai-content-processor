#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DEMO: Pandas + AI Paraphrase - Minh h·ªça c√°ch ho·∫°t ƒë·ªông

Ch·∫°y file n√†y ƒë·ªÉ hi·ªÉu r√µ c√°ch pandas ƒë·ªçc CSV v√† AI paraphrase
"""

import json
from datetime import datetime

import pandas as pd


def demo_pandas_basics():
    """Demo c∆° b·∫£n v·ªÅ pandas"""
    print("üêº DEMO PANDAS - Th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu Python")
    print("=" * 60)

    # 1. T·∫°o DataFrame t·ª´ dictionary (gi·∫£ l·∫≠p CSV data)
    sample_data = {
        "id": [1, 2, 3],
        "title": [
            "C√°ch ch∆°i baccarat online hi·ªáu qu·∫£",
            "Tips slot machine th·∫Øng l·ªõn",
            "H∆∞·ªõng d·∫´n poker cho ng∆∞·ªùi m·ªõi",
        ],
        "content": [
            "Baccarat l√† tr√≤ ch∆°i casino ph·ªï bi·∫øn. Ng∆∞·ªùi ch∆°i c·∫ßn hi·ªÉu quy t·∫Øc c∆° b·∫£n.",
            "Slot machine c√≥ nhi·ªÅu lo·∫°i. Ch·ªçn m√°y ph√π h·ª£p r·∫•t quan tr·ªçng.",
            "Poker c·∫ßn k·ªπ nƒÉng v√† chi·∫øn thu·∫≠t. H·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.",
        ],
        "created_date": ["2025-08-05", "2025-08-05", "2025-08-05"],
    }

    # 2. T·∫°o DataFrame (gi·ªëng nh∆∞ ƒë·ªçc CSV)
    df = pd.DataFrame(sample_data)

    print("üìä PANDAS DataFrame (gi·ªëng nh∆∞ ƒë·ªçc CSV):")
    print(df)
    print()

    print(f"üìà Th·ªëng k√™:")
    print(f"   S·ªë rows: {len(df)}")
    print(f"   S·ªë columns: {len(df.columns)}")
    print(f"   Columns: {list(df.columns)}")
    print()

    # 3. Truy c·∫≠p d·ªØ li·ªáu
    print("üîç TRUY C·∫¨P D·ªÆ LI·ªÜU:")
    for index, row in df.iterrows():
        print(f"   Row {index+1}:")
        print(f"     ID: {row['id']}")
        print(f"     Title: {row['title'][:30]}...")
        print(f"     Content: {row['content'][:40]}...")
        print()

    return df


def demo_ai_paraphrase_simulation():
    """Demo gi·∫£ l·∫≠p AI paraphrase (kh√¥ng g·ªçi API th·∫≠t)"""
    print("ü§ñ DEMO AI PARAPHRASE - Gi·∫£ l·∫≠p ChatGPT")
    print("=" * 60)

    original_posts = [
        {
            "title": "C√°ch ch∆°i baccarat online hi·ªáu qu·∫£",
            "content": "Baccarat l√† tr√≤ ch∆°i casino ph·ªï bi·∫øn. Ng∆∞·ªùi ch∆°i c·∫ßn hi·ªÉu quy t·∫Øc c∆° b·∫£n.",
        },
        {
            "title": "Tips slot machine th·∫Øng l·ªõn",
            "content": "Slot machine c√≥ nhi·ªÅu lo·∫°i. Ch·ªçn m√°y ph√π h·ª£p r·∫•t quan tr·ªçng.",
        },
    ]

    # Gi·∫£ l·∫≠p AI response (th·ª±c t·∫ø s·∫Ω g·ªçi ChatGPT API)
    ai_responses = [
        {
            "new_title": "Master Baccarat Strategies for Philippines Online Casino Players",
            "new_content": "Discover the most effective baccarat gaming techniques specifically designed for Filipino casino enthusiasts. Understanding fundamental rules is essential for maximizing your winning potential.",
            "notes": "Content localized for Philippines market with SEO optimization",
        },
        {
            "new_title": "Ultimate Slot Gaming Guide Philippines",
            "new_content": "Explore comprehensive slot machine strategies tailored for Philippines online casino market. Selecting the right slot games is crucial for Filipino players seeking maximum returns.",
            "notes": "Optimized for Philippines slot gaming audience",
        },
    ]

    print("üîÑ QU√ÅN TR√åNH AI PARAPHRASE:")
    for i, (original, ai_result) in enumerate(zip(original_posts, ai_responses)):
        print(f"\nüìù POST #{i+1}:")
        print(f"   ORIGINAL TITLE: {original['title']}")
        print(f"   AI NEW TITLE:   {ai_result['new_title']}")
        print(f"   ORIGINAL CONTENT: {original['content']}")
        print(f"   AI NEW CONTENT:   {ai_result['new_content'][:80]}...")
        print(f"   AI NOTES: {ai_result['notes']}")
        print("   " + "-" * 50)

    return ai_responses


def demo_complete_workflow():
    """Demo quy tr√¨nh ho√†n ch·ªânh: Pandas + AI Paraphrase"""
    print("üöÄ DEMO COMPLETE WORKFLOW - Pandas + AI")
    print("=" * 60)

    # B∆Ø·ªöC 1: Pandas ƒë·ªçc CSV (gi·∫£ l·∫≠p)
    print("üìä B∆Ø·ªöC 1: PANDAS ƒê·ªåC CSV")
    original_df = demo_pandas_basics()

    # B∆Ø·ªöC 2: AI Paraphrase (gi·∫£ l·∫≠p)
    print("ü§ñ B∆Ø·ªöC 2: AI PARAPHRASE")
    ai_results = demo_ai_paraphrase_simulation()

    # B∆Ø·ªöC 3: K·∫øt h·ª£p k·∫øt qu·∫£
    print("üîó B∆Ø·ªöC 3: K·∫æT H·ª¢P K·∫æT QU·∫¢")

    # T·∫°o data m·ªõi v·ªõi AI paraphrase
    processed_data = []
    for index, row in original_df.iterrows():
        if index < len(ai_results):  # Ch·ªâ demo 2 posts ƒë·∫ßu
            ai_result = ai_results[index]
            processed_data.append(
                {
                    "id": row["id"],
                    "original_title": row["title"],
                    "title": ai_result["new_title"],  # ‚Üê AI paraphrased
                    "content": ai_result["new_content"],  # ‚Üê AI paraphrased
                    "category": "Live Casino",  # ‚Üê AI classified
                    "keywords": "baccarat philippines, online casino",  # ‚Üê AI generated
                    "created_date": row["created_date"],
                    "processing_notes": ai_result["notes"],
                }
            )
        else:
            # Gi·ªØ nguy√™n nh·ªØng posts kh√¥ng x·ª≠ l√Ω
            processed_data.append(
                {
                    "id": row["id"],
                    "original_title": row["title"],
                    "title": row["title"],
                    "content": row["content"],
                    "category": "Casino & Gaming",
                    "keywords": "casino, gaming",
                    "created_date": row["created_date"],
                    "processing_notes": "Not processed in demo",
                }
            )

    # B∆Ø·ªöC 4: Pandas t·∫°o DataFrame m·ªõi
    final_df = pd.DataFrame(processed_data)

    print("‚úÖ B∆Ø·ªöC 4: K·∫æT QU·∫¢ CU·ªêI C√ôNG")
    print("DataFrame sau khi x·ª≠ l√Ω:")
    print(final_df[["id", "original_title", "title", "category"]])
    print()

    # B∆Ø·ªöC 5: Pandas xu·∫•t CSV (gi·∫£ l·∫≠p)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"posts_ready_demo_{timestamp}.csv"

    print(f"üíæ B∆Ø·ªöC 5: XU·∫§T CSV")
    print(f"S·∫Ω xu·∫•t ra file: {output_file}")
    print("(Trong demo n√†y kh√¥ng th·ª±c s·ª± t·∫°o file)")

    # final_df.to_csv(output_file, index=False)  # Uncommnet ƒë·ªÉ th·ª±c s·ª± t·∫°o file

    return final_df


def show_real_vs_demo():
    """So s√°nh code demo vs code th·∫≠t"""
    print("\nüîç SO S√ÅNH: DEMO vs TH·ª∞C T·∫æ")
    print("=" * 60)

    print("üìã DEMO CODE (ƒë∆°n gi·∫£n):")
    print(
        """
# Demo gi·∫£ l·∫≠p
df = pd.DataFrame(sample_data)           # T·∫°o data gi·∫£
ai_result = {'new_title': '...'}         # AI response gi·∫£
final_df = pd.DataFrame(processed_data)  # K·∫øt qu·∫£ demo
"""
    )

    print("üöÄ PRODUCTION CODE (th·ª±c t·∫ø):")
    print(
        """
# Code th·ª±c t·∫ø trong csv_ai_processor.py
df = pd.read_csv('./data/posts.csv')     # ƒê·ªçc CSV th·∫≠t
response = client.chat.completions.create(...)  # G·ªçi ChatGPT API th·∫≠t
ai_result = json.loads(response.choices[0].message.content)  # Parse JSON
final_df.to_csv(output_file, index=False)  # Xu·∫•t CSV th·∫≠t
"""
    )

    print("üí° ƒêI·ªÇM KH√ÅC BI·ªÜT:")
    print("   Demo: D·ªØ li·ªáu gi·∫£ l·∫≠p, kh√¥ng g·ªçi API, kh√¥ng t·∫°o file")
    print("   Th·ª±c t·∫ø: ƒê·ªçc CSV th·∫≠t, g·ªçi ChatGPT API, t·∫°o file output")
    print("   Nh∆∞ng logic x·ª≠ l√Ω gi·ªëng h·ªát nhau!")


def main():
    """H√†m main demo"""
    print("üéØ PANDAS + AI PARAPHRASE DEMO")
    print("Hi·ªÉu c√°ch h·ªá th·ªëng ho·∫°t ƒë·ªông m√† kh√¥ng c·∫ßn API keys")
    print("=" * 70)

    try:
        # Ch·∫°y demo ho√†n ch·ªânh
        final_df = demo_complete_workflow()

        # So s√°nh v·ªõi code th·ª±c t·∫ø
        show_real_vs_demo()

        print("\nüéâ DEMO HO√ÄN T·∫§T!")
        print("B√¢y gi·ªù b·∫°n ƒë√£ hi·ªÉu:")
        print("   üêº Pandas: ƒê·ªçc/xu·∫•t CSV d·ªÖ d√†ng")
        print("   ü§ñ AI Paraphrase: ChatGPT vi·∫øt l·∫°i content")
        print("   üîó K·∫øt h·ª£p: T·∫°o h·ªá th·ªëng x·ª≠ l√Ω content t·ª± ƒë·ªông")
        print("\nMu·ªën ch·∫°y th·ª±c t·∫ø? ‚Üí python interactive_menu.py")

    except Exception as e:
        print(f"‚ùå L·ªói demo: {e}")


if __name__ == "__main__":
    main()
