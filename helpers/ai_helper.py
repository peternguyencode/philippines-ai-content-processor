import openai
import google.generativeai as genai
import requests
import time
import base64
from io import BytesIO
from typing import Optional, Dict, Any
from config import Config

class AIHelper:
    """L·ªõp x·ª≠ l√Ω AI ƒë·ªÉ sinh content, title, meta v√† ·∫£nh"""
    
    def __init__(self):
        self._setup_apis()
    
    def _setup_apis(self):
        """Thi·∫øt l·∫≠p API keys cho c√°c AI provider"""
        # Setup OpenAI
        if Config.OPENAI_API_KEY:
            self.openai_client = openai.OpenAI(api_key=Config.OPENAI_API_KEY)
            print("‚úÖ ƒê√£ thi·∫øt l·∫≠p OpenAI API")
        
        # Setup Gemini
        if Config.GEMINI_API_KEY:
            genai.configure(api_key=Config.GEMINI_API_KEY)
            print("‚úÖ ƒê√£ thi·∫øt l·∫≠p Gemini API")
    
    def generate_content(self, prompt: str, provider: str = None) -> Dict[str, Any]:
        """
        Sinh n·ªôi dung b√†i vi·∫øt t·ª´ prompt
        Returns: {
            'title': str,
            'content': str,
            'image_prompt': str,
            'meta_title': str,
            'meta_description': str
        }
        """
        provider = provider or Config.DEFAULT_AI_PROVIDER
        
        try:
            # T·∫°o prompt chi ti·∫øt
            detailed_prompt = f"""
            H√£y vi·∫øt m·ªôt b√†i blog ch·∫•t l∆∞·ª£ng cao d·ª±a tr√™n y√™u c·∫ßu sau: "{prompt}"
            
            Y√™u c·∫ßu:
            1. T·∫°o ti√™u ƒë·ªÅ h·∫•p d·∫´n (d∆∞·ªõi 60 k√Ω t·ª±)
            2. Vi·∫øt n·ªôi dung chi ti·∫øt, h·ªØu √≠ch (kho·∫£ng {Config.MAX_CONTENT_LENGTH} t·ª´)
            3. T·∫°o prompt ƒë·ªÉ sinh ·∫£nh cover ph√π h·ª£p
            4. T·∫°o meta title SEO (d∆∞·ªõi 60 k√Ω t·ª±)
            5. T·∫°o meta description SEO (d∆∞·ªõi 160 k√Ω t·ª±)
            
            Tr·∫£ v·ªÅ theo format JSON:
            {{
                "title": "Ti√™u ƒë·ªÅ b√†i vi·∫øt",
                "content": "N·ªôi dung b√†i vi·∫øt ƒë·∫ßy ƒë·ªß v·ªõi HTML tags",
                "image_prompt": "M√¥ t·∫£ ·∫£nh ƒë·ªÉ sinh b·∫±ng AI",
                "meta_title": "Meta title SEO",
                "meta_description": "Meta description SEO"
            }}
            """
            
            if provider == 'openai':
                return self._generate_with_openai(detailed_prompt)
            elif provider == 'gemini':
                return self._generate_with_gemini(detailed_prompt)
            else:
                raise ValueError(f"Provider kh√¥ng h·ªó tr·ª£: {provider}")
                
        except Exception as e:
            print(f"‚ùå L·ªói sinh content: {str(e)}")
            return self._create_error_response(str(e))
    
    def _generate_with_openai(self, prompt: str) -> Dict[str, Any]:
        """Sinh content b·∫±ng OpenAI GPT"""
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "B·∫°n l√† m·ªôt copywriter chuy√™n nghi·ªáp, vi·∫øt ti·∫øng Vi·ªát t·ª± nhi√™n v√† h·∫•p d·∫´n."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=3000,
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            
            # Parse JSON response
            import json
            try:
                if content:
                    result = json.loads(content)
                    return result
                else:
                    return self._create_error_response("No content returned")
            except json.JSONDecodeError:
                # N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, t·∫°o response th·ªß c√¥ng
                if content:
                    return self._parse_text_response(content)
                else:
                    return self._create_error_response("Empty response")
                
        except Exception as e:
            print(f"‚ùå L·ªói OpenAI: {str(e)}")
            raise e
    
    def _generate_with_gemini(self, prompt: str) -> Dict[str, Any]:
        """Sinh content b·∫±ng Google Gemini"""
        try:
            model = genai.GenerativeModel('gemini-1.5-flash')
            response = model.generate_content(prompt)
            
            content = response.text
            
            # Parse JSON response
            import json
            try:
                result = json.loads(content)
                return result
            except json.JSONDecodeError:
                return self._parse_text_response(content)
                
        except Exception as e:
            print(f"‚ùå L·ªói Gemini: {str(e)}")
            raise e
    
    def _parse_text_response(self, text: str) -> Dict[str, Any]:
        """Parse response khi kh√¥ng c√≥ JSON format"""
        lines = text.split('\n')
        
        # Logic ƒë∆°n gi·∫£n ƒë·ªÉ extract th√¥ng tin
        title = lines[0].strip() if lines else "Ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh"
        content = text
        
        return {
            'title': title[:60],
            'content': content,
            'image_prompt': f"Professional illustration about {title}",
            'meta_title': title[:60],
            'meta_description': content[:160] + "..." if len(content) > 160 else content
        }
    
    def generate_image(self, prompt: str, provider: str = None) -> Optional[str]:
        """
        Sinh ·∫£nh t·ª´ prompt
        Returns: URL c·ªßa ·∫£nh ƒë√£ sinh
        """
        provider = provider or Config.IMAGE_AI_PROVIDER
        
        try:
            if provider == 'openai':
                return self._generate_image_openai(prompt)
            elif provider == 'gemini':
                # Gemini ch∆∞a h·ªó tr·ª£ sinh ·∫£nh, d√πng OpenAI backup
                return self._generate_image_openai(prompt)
            else:
                raise ValueError(f"Image provider kh√¥ng h·ªó tr·ª£: {provider}")
                
        except Exception as e:
            print(f"‚ùå L·ªói sinh ·∫£nh: {str(e)}")
            return None
    
    def _generate_image_openai(self, prompt: str) -> Optional[str]:
        """Sinh ·∫£nh b·∫±ng DALL-E"""
        try:
            # T·ªëi ∆∞u prompt cho DALL-E
            optimized_prompt = f"""
            {prompt}, professional quality, high resolution, 
            clean design, suitable for blog cover image, 
            vibrant colors, modern style
            """
            
            response = self.openai_client.images.generate(
                model="dall-e-3",
                prompt=optimized_prompt,
                size="1024x1024",  # Fixed size for DALL-E 3
                quality="standard",
                n=1
            )
            
            image_url = response.data[0].url if response.data else None
            if image_url:
                print(f"‚úÖ ƒê√£ sinh ·∫£nh: {image_url}")
                return image_url
            else:
                return None
            
        except Exception as e:
            print(f"‚ùå L·ªói DALL-E: {str(e)}")
            return None
    
    def _create_error_response(self, error_msg: str) -> Dict[str, Any]:
        """T·∫°o response l·ªói m·∫∑c ƒë·ªãnh"""
        return {
            'title': 'L·ªói sinh content',
            'content': f'C√≥ l·ªói x·∫£y ra: {error_msg}',
            'image_prompt': 'Error illustration',
            'meta_title': 'L·ªói',
            'meta_description': 'C√≥ l·ªói x·∫£y ra khi sinh content'
        }
    
    def optimize_for_seo(self, title: str, content: str) -> Dict[str, str]:
        """T·ªëi ∆∞u SEO cho title v√† content"""
        try:
            seo_prompt = f"""
            H√£y t·ªëi ∆∞u SEO cho b√†i vi·∫øt sau:
            Ti√™u ƒë·ªÅ: {title}
            N·ªôi dung: {content[:500]}...
            
            T·∫°o:
            1. Meta title t·ªëi ∆∞u SEO (d∆∞·ªõi 60 k√Ω t·ª±)
            2. Meta description h·∫•p d·∫´n (d∆∞·ªõi 160 k√Ω t·ª±)
            3. ƒê·ªÅ xu·∫•t t·ª´ kh√≥a ch√≠nh
            
            Tr·∫£ v·ªÅ JSON format:
            {{
                "meta_title": "...",
                "meta_description": "...",
                "keywords": "..."
            }}
            """
            
            if Config.DEFAULT_AI_PROVIDER == 'openai':
                response = self.openai_client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": seo_prompt}],
                    max_tokens=500
                )
                content = response.choices[0].message.content or ""
            else:
                model = genai.GenerativeModel('gemini-1.5-flash')
                response = model.generate_content(seo_prompt)
                content = response.text
            
            import json
            return json.loads(content)
            
        except Exception as e:
            print(f"‚ùå L·ªói t·ªëi ∆∞u SEO: {str(e)}")
            return {
                'meta_title': title[:60],
                'meta_description': content[:160],
                'keywords': ''
            }

# Test function
if __name__ == "__main__":
    try:
        Config.validate_config()
        ai = AIHelper()
        
        # Test sinh content
        test_prompt = "Vi·∫øt b√†i v·ªÅ l·ª£i √≠ch c·ªßa AI trong marketing"
        result = ai.generate_content(test_prompt)
        
        print("üìù K·∫øt qu·∫£ sinh content:")
        print(f"Title: {result.get('title')}")
        print(f"Content length: {len(result.get('content', ''))}")
        print(f"Image prompt: {result.get('image_prompt')}")
        
        # Test sinh ·∫£nh
        if result.get('image_prompt'):
            image_url = ai.generate_image(result['image_prompt'])
            print(f"üñºÔ∏è Image URL: {image_url}")
            
    except Exception as e:
        print(f"L·ªói test: {str(e)}")
