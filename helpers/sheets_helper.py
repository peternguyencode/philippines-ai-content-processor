import gspread
import time
from datetime import datetime
from typing import List, Dict, Optional, Any
from config import Config
from google.oauth2.service_account import Credentials

class SheetsHelper:
    """L·ªõp x·ª≠ l√Ω Google Sheets API"""
    
    def __init__(self):
        self.gc = None
        self.sheet = None
        self.worksheet = None
        self._connect()
    
    def _connect(self):
        """K·∫øt n·ªëi ƒë·∫øn Google Sheets"""
        try:
            # ƒê·ªãnh nghƒ©a scope c·∫ßn thi·∫øt
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # T·∫°o credentials t·ª´ service account
            creds = Credentials.from_service_account_file(
                Config.GOOGLE_CREDS_FILE, 
                scopes=scope
            )
            
            # Kh·ªüi t·∫°o client
            self.gc = gspread.authorize(creds)
            
            # M·ªü sheet theo ID
            self.sheet = self.gc.open_by_key(Config.GOOGLE_SHEET_ID)
            self.worksheet = self.sheet.sheet1  # S·ª≠ d·ª•ng sheet ƒë·∫ßu ti√™n
            
            print("‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng!")
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Google Sheets: {str(e)}")
            raise e
    
    def get_pending_rows(self) -> List[Dict[str, Any]]:
        """L·∫•y danh s√°ch c√°c h√†ng ch∆∞a x·ª≠ l√Ω (status = 'pending' ho·∫∑c r·ªóng)"""
        try:
            # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
            all_records = self.worksheet.get_all_records()
            
            pending_rows = []
            for i, record in enumerate(all_records, 2):  # B·∫Øt ƒë·∫ßu t·ª´ h√†ng 2 (do header ·ªü h√†ng 1)
                # S·ª≠ d·ª•ng key ch√≠nh x√°c t·ª´ header v√† convert sang string
                status = str(record.get('Status', '')).lower().strip()
                prompt = str(record.get('Prompt', '')).strip()
                
                # Ch·ªâ l·∫•y nh·ªØng h√†ng c√≥ prompt v√† ch∆∞a x·ª≠ l√Ω
                if prompt and (not status or status == 'pending'):
                    record['row_number'] = i
                    record['prompt'] = prompt  # Th√™m key 'prompt' th·ªëng nh·∫•t
                    pending_rows.append(record)
            
            print(f"üìã T√¨m th·∫•y {len(pending_rows)} h√†ng c·∫ßn x·ª≠ l√Ω")
            return pending_rows
            
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
            return []
    
    def update_row_status(self, row_number: int, status: str, **kwargs):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† th√¥ng tin kh√°c cho m·ªôt h√†ng"""
        try:
            # C·∫≠p nh·∫≠t status
            self.worksheet.update_cell(row_number, 2, status)  # C·ªôt B = Status
            
            # C·∫≠p nh·∫≠t c√°c th√¥ng tin kh√°c
            column_mapping = {
                'title': 3,         # C·ªôt C
                'content': 4,       # C·ªôt D
                'wp_url': 5,        # C·ªôt E
                'image_url': 6,     # C·ªôt F
                'meta_title': 7,    # C·ªôt G
                'meta_desc': 8,     # C·ªôt H
                'created_date': 9,  # C·ªôt I
                'error_log': 10     # C·ªôt J
            }
            
            for key, value in kwargs.items():
                if key in column_mapping and value:
                    col_num = column_mapping[key]
                    self.worksheet.update_cell(row_number, col_num, str(value))
            
            # Lu√¥n c·∫≠p nh·∫≠t th·ªùi gian
            if 'created_date' not in kwargs:
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                self.worksheet.update_cell(row_number, 9, current_time)
            
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t h√†ng {row_number}: {status}")
            
            # Delay nh·ªè ƒë·ªÉ tr√°nh rate limit
            time.sleep(0.5)
            
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t h√†ng {row_number}: {str(e)}")
    
    def update_error(self, row_number: int, error_message: str):
        """C·∫≠p nh·∫≠t l·ªói cho m·ªôt h√†ng"""
        try:
            self.update_row_status(
                row_number, 
                'error', 
                error_log=error_message
            )
        except Exception as e:
            print(f"‚ùå L·ªói ghi log l·ªói: {str(e)}")
    
    def batch_update(self, updates: List[Dict]):
        """C·∫≠p nh·∫≠t h√†ng lo·∫°t ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô"""
        try:
            # Chu·∫©n b·ªã d·ªØ li·ªáu update d·∫°ng batch
            batch_data = []
            
            for update in updates:
                row_num = update['row_number']
                data = update['data']
                
                for key, value in data.items():
                    if key == 'status':
                        batch_data.append({
                            'range': f'B{row_num}',
                            'values': [[value]]
                        })
                    # Th√™m c√°c tr∆∞·ªùng kh√°c...
            
            # Th·ª±c hi·ªán batch update
            if batch_data:
                self.worksheet.batch_update(batch_data)
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t batch {len(batch_data)} √¥")
            
        except Exception as e:
            print(f"‚ùå L·ªói batch update: {str(e)}")
    
    def create_sample_header(self):
        """T·∫°o header m·∫´u cho Google Sheet"""
        headers = [
            'Prompt', 'Status', 'Title', 'Content', 'WP_URL', 
            'Image_URL', 'Meta_Title', 'Meta_Desc', 'Created_Date', 'Error_Log'
        ]
        
        try:
            # Ki·ªÉm tra xem ƒë√£ c√≥ header ch∆∞a
            first_row = self.worksheet.row_values(1)
            
            if not first_row or first_row[0] != 'Prompt':
                self.worksheet.insert_row(headers, 1)
                print("‚úÖ ƒê√£ t·∫°o header cho Google Sheet")
            else:
                print("‚ÑπÔ∏è Header ƒë√£ t·ªìn t·∫°i")
                
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o header: {str(e)}")
    
    def add_sample_data(self):
        """Th√™m d·ªØ li·ªáu m·∫´u ƒë·ªÉ test"""
        sample_data = [
            ["Vi·∫øt b√†i v·ªÅ AI trong marketing", "pending", "", "", "", "", "", "", "", ""],
            ["H∆∞·ªõng d·∫´n SEO website", "pending", "", "", "", "", "", "", "", ""],
            ["Review s·∫£n ph·∫©m iPhone m·ªõi", "pending", "", "", "", "", "", "", "", ""]
        ]
        
        try:
            for data in sample_data:
                self.worksheet.append_row(data)
            print("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu m·∫´u")
            
        except Exception as e:
            print(f"‚ùå L·ªói th√™m d·ªØ li·ªáu m·∫´u: {str(e)}")

# Test function
if __name__ == "__main__":
    try:
        Config.validate_config()
        sheets = SheetsHelper()
        
        # T·∫°o header v√† d·ªØ li·ªáu m·∫´u
        sheets.create_sample_header()
        sheets.add_sample_data()
        
        # Test ƒë·ªçc d·ªØ li·ªáu
        pending = sheets.get_pending_rows()
        print(f"T√¨m th·∫•y {len(pending)} h√†ng c·∫ßn x·ª≠ l√Ω")
        
    except Exception as e:
        print(f"L·ªói test: {str(e)}")
