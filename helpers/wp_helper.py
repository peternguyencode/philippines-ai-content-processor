import requests
import json
import time
import base64
from urllib.parse import urljoin
from typing import Optional, Dict, Any, List
from config import Config

class WPHelper:
    """L·ªõp x·ª≠ l√Ω WordPress REST API"""
    
    def __init__(self):
        self.base_url = Config.WP_API_URL
        self.auth = (Config.WP_USERNAME, Config.WP_PASSWORD)
        self.session = requests.Session()
        self.session.auth = self.auth
        
        # Test k·∫øt n·ªëi
        self._test_connection()
    
    def _test_connection(self):
        """Test k·∫øt n·ªëi ƒë·∫øn WordPress API"""
        try:
            response = self.session.get(f"{self.base_url}/users/me")
            if response.status_code == 200:
                user_info = response.json()
                print(f"‚úÖ K·∫øt n·ªëi WordPress th√†nh c√¥ng! User: {user_info.get('name')}")
            else:
                print(f"‚ö†Ô∏è C·∫£nh b√°o k·∫øt n·ªëi WP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi WordPress: {str(e)}")
    
    def create_post(self, title: str, content: str, status: str = 'draft') -> Optional[Dict[str, Any]]:
        """
        T·∫°o b√†i vi·∫øt m·ªõi tr√™n WordPress
        
        Args:
            title: Ti√™u ƒë·ªÅ b√†i vi·∫øt
            content: N·ªôi dung b√†i vi·∫øt (HTML)
            status: Tr·∫°ng th√°i b√†i vi·∫øt ('draft', 'publish', 'private')
        
        Returns:
            Dict ch·ª©a th√¥ng tin b√†i vi·∫øt ƒë√£ t·∫°o ho·∫∑c None n·∫øu l·ªói
        """
        try:
            post_data = {
                'title': title,
                'content': content,
                'status': status,
                'format': 'standard'
            }
            
            response = self.session.post(
                f"{self.base_url}/posts",
                json=post_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 201:
                post_info = response.json()
                print(f"‚úÖ ƒê√£ t·∫°o b√†i vi·∫øt: {post_info['title']['rendered']}")
                print(f"üîó URL: {post_info['link']}")
                return post_info
            else:
                print(f"‚ùå L·ªói t·∫°o b√†i vi·∫øt: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Exception t·∫°o b√†i vi·∫øt: {str(e)}")
            return None
    
    def upload_image(self, image_url: str, filename: str = None) -> Optional[Dict[str, Any]]:
        """
        Upload ·∫£nh t·ª´ URL l√™n WordPress Media Library
        
        Args:
            image_url: URL c·ªßa ·∫£nh c·∫ßn upload
            filename: T√™n file (optional)
        
        Returns:
            Dict ch·ª©a th√¥ng tin ·∫£nh ƒë√£ upload ho·∫∑c None n·∫øu l·ªói
        """
        try:
            # Download ·∫£nh t·ª´ URL
            img_response = requests.get(image_url, timeout=30)
            if img_response.status_code != 200:
                print(f"‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh t·ª´ URL: {image_url}")
                return None
            
            # T·∫°o filename n·∫øu ch∆∞a c√≥
            if not filename:
                filename = f"ai_generated_{int(time.time())}.png"
            
            # Chu·∫©n b·ªã data ƒë·ªÉ upload
            files = {
                'file': (filename, img_response.content, 'image/png')
            }
            
            headers = {
                'Content-Disposition': f'attachment; filename="{filename}"'
            }
            
            # Upload l√™n WordPress
            response = self.session.post(
                f"{self.base_url}/media",
                files=files,
                headers=headers
            )
            
            if response.status_code == 201:
                media_info = response.json()
                print(f"‚úÖ ƒê√£ upload ·∫£nh: {media_info['source_url']}")
                return media_info
            else:
                print(f"‚ùå L·ªói upload ·∫£nh: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Exception upload ·∫£nh: {str(e)}")
            return None
    
    def set_featured_image(self, post_id: int, media_id: int) -> bool:
        """
        ƒê·∫∑t ·∫£nh featured cho b√†i vi·∫øt
        
        Args:
            post_id: ID c·ªßa b√†i vi·∫øt
            media_id: ID c·ªßa ·∫£nh trong media library
        
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu l·ªói
        """
        try:
            update_data = {
                'featured_media': media_id
            }
            
            response = self.session.post(
                f"{self.base_url}/posts/{post_id}",
                json=update_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                print(f"‚úÖ ƒê√£ ƒë·∫∑t featured image cho b√†i {post_id}")
                return True
            else:
                print(f"‚ùå L·ªói ƒë·∫∑t featured image: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception ƒë·∫∑t featured image: {str(e)}")
            return False
    
    def update_post_meta(self, post_id: int, meta_title: str, meta_description: str) -> bool:
        """
        C·∫≠p nh·∫≠t meta SEO cho b√†i vi·∫øt (d√†nh cho Yoast SEO)
        
        Args:
            post_id: ID c·ªßa b√†i vi·∫øt
            meta_title: Meta title SEO
            meta_description: Meta description SEO
        
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu l·ªói
        """
        try:
            # C·∫≠p nh·∫≠t Yoast SEO meta
            meta_data = {
                'meta': {
                    '_yoast_wpseo_title': meta_title,
                    '_yoast_wpseo_metadesc': meta_description,
                    '_yoast_wpseo_focuskw': '',  # C√≥ th·ªÉ th√™m focus keyword
                }
            }
            
            response = self.session.post(
                f"{self.base_url}/posts/{post_id}",
                json=meta_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t SEO meta cho b√†i {post_id}")
                return True
            else:
                print(f"‚ùå L·ªói c·∫≠p nh·∫≠t SEO meta: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception c·∫≠p nh·∫≠t SEO meta: {str(e)}")
            return False
    
    def publish_post(self, post_id: int) -> bool:
        """
        Publish b√†i vi·∫øt (chuy·ªÉn t·ª´ draft sang publish)
        
        Args:
            post_id: ID c·ªßa b√†i vi·∫øt
        
        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu l·ªói
        """
        try:
            update_data = {
                'status': 'publish'
            }
            
            response = self.session.post(
                f"{self.base_url}/posts/{post_id}",
                json=update_data,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                post_info = response.json()
                print(f"‚úÖ ƒê√£ publish b√†i vi·∫øt: {post_info['link']}")
                return True
            else:
                print(f"‚ùå L·ªói publish b√†i vi·∫øt: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Exception publish b√†i vi·∫øt: {str(e)}")
            return False
    
    def process_complete_post(self, title: str, content: str, image_url: str = None, 
                            meta_title: str = None, meta_description: str = None,
                            auto_publish: bool = False) -> Optional[Dict[str, Any]]:
        """
        X·ª≠ l√Ω ho√†n ch·ªânh m·ªôt b√†i vi·∫øt: t·∫°o post, upload ·∫£nh, set meta, publish
        
        Returns:
            Dict ch·ª©a th√¥ng tin b√†i vi·∫øt ho√†n ch·ªânh ho·∫∑c None n·∫øu l·ªói
        """
        try:
            # 1. T·∫°o b√†i vi·∫øt draft
            post_info = self.create_post(title, content, 'draft')
            if not post_info:
                return None
            
            post_id = post_info['id']
            result = {
                'post_id': post_id,
                'post_url': post_info['link'],
                'title': post_info['title']['rendered']
            }
            
            # 2. Upload v√† set featured image
            if image_url:
                media_info = self.upload_image(image_url)
                if media_info:
                    media_id = media_info['id']
                    if self.set_featured_image(post_id, media_id):
                        result['featured_image'] = media_info['source_url']
                        result['media_id'] = media_id
            
            # 3. C·∫≠p nh·∫≠t SEO meta
            if meta_title and meta_description:
                if self.update_post_meta(post_id, meta_title, meta_description):
                    result['meta_title'] = meta_title
                    result['meta_description'] = meta_description
            
            # 4. Publish n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if auto_publish:
                if self.publish_post(post_id):
                    result['status'] = 'published'
                else:
                    result['status'] = 'draft'
            else:
                result['status'] = 'draft'
            
            print(f"‚úÖ Ho√†n th√†nh x·ª≠ l√Ω b√†i vi·∫øt: {title}")
            return result
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω ho√†n ch·ªânh b√†i vi·∫øt: {str(e)}")
            return None
    
    def get_post_info(self, post_id: int) -> Optional[Dict[str, Any]]:
        """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt"""
        try:
            response = self.session.get(f"{self.base_url}/posts/{post_id}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt {post_id}")
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y th√¥ng tin b√†i vi·∫øt: {str(e)}")
            return None

# Test function
if __name__ == "__main__":
    try:
        Config.validate_config()
        wp = WPHelper()
        
        # Test t·∫°o b√†i vi·∫øt
        test_title = "Test b√†i vi·∫øt t·ª´ Python"
        test_content = "<h2>ƒê√¢y l√† test content</h2><p>N·ªôi dung test t·ª´ Python script.</p>"
        
        result = wp.process_complete_post(
            title=test_title,
            content=test_content,
            meta_title="Test Meta Title",
            meta_description="Test meta description for SEO",
            auto_publish=False
        )
        
        if result:
            print(f"üéâ Test th√†nh c√¥ng! Post ID: {result['post_id']}")
        else:
            print("‚ùå Test th·∫•t b·∫°i!")
            
    except Exception as e:
        print(f"L·ªói test: {str(e)}")
