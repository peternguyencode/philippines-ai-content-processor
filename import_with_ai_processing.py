#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script import d·ªØ li·ªáu v·ªõi AI x·ª≠ l√Ω content b·∫±ng ChatGPT
"""

import json
import gspread
import time
import re
from openai import OpenAI
from datetime import datetime
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

def setup_openai():
    """Thi·∫øt l·∫≠p OpenAI API"""
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå Kh√¥ng t√¨m th·∫•y OPENAI_API_KEY trong file .env")
        return None
    
    client = OpenAI(api_key=api_key)
    print("‚úÖ OpenAI API ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p")
    return client

def process_content_with_ai(client, content, title):
    """X·ª≠ l√Ω content b·∫±ng ChatGPT"""
    try:
        # L√†m s·∫°ch HTML tr∆∞·ªõc
        clean_content = clean_html_content(content)
        
        # N·∫øu content qu√° ng·∫Øn, kh√¥ng c·∫ßn x·ª≠ l√Ω AI
        if len(clean_content) < 100:
            return clean_content
        
        # Prompt cho ChatGPT
        prompt = f"""
H√£y c·∫£i thi·ªán v√† t·ªëi ∆∞u n·ªôi dung b√†i vi·∫øt sau v·ªÅ casino/bonus cho th·ªã tr∆∞·ªùng Philippines. 
Y√™u c·∫ßu:
1. Gi·ªØ nguy√™n th√¥ng tin ch√≠nh v√† t·ª´ kh√≥a quan tr·ªçng
2. C·∫£i thi·ªán c·∫•u tr√∫c v√† d·ªÖ ƒë·ªçc h∆°n
3. Th√™m call-to-action ph√π h·ª£p
4. ƒê·ªô d√†i kho·∫£ng 800-1200 t·ª´
5. Vi·∫øt b·∫±ng ti·∫øng Anh, ph√π h·ª£p v·ªõi ng∆∞·ªùi Philippines

Ti√™u ƒë·ªÅ: {title}

N·ªôi dung g·ªëc:
{clean_content[:2000]}...

H√£y tr·∫£ v·ªÅ n·ªôi dung ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán:
"""

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt content v·ªÅ casino v√† bonus. H√£y t·∫°o n·ªôi dung ch·∫•t l∆∞·ª£ng cao, h·∫•p d·∫´n v√† c√≥ t√≠nh thuy·∫øt ph·ª•c."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.7
        )
        
        ai_content = response.choices[0].message.content.strip()
        print(f"‚úÖ AI ƒë√£ x·ª≠ l√Ω content (ƒë·ªô d√†i: {len(ai_content)} k√Ω t·ª±)")
        return ai_content
        
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω AI: {e}")
        print("S·∫Ω s·ª≠ d·ª•ng content g·ªëc ƒë√£ l√†m s·∫°ch")
        return clean_html_content(content)

def setup_google_sheets():
    """Thi·∫øt l·∫≠p k·∫øt n·ªëi Google Sheets"""
    try:
        creds = Credentials.from_service_account_file(
            'strong-augury-467706-b4-fa91bb781d0a.json',
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key('1JNeybKkC9nRUXWgX6yIdhSv8roiweal2VESQtwfLHc0')
        
        return spreadsheet
    except Exception as e:
        print(f"L·ªói khi thi·∫øt l·∫≠p Google Sheets: {e}")
        return None

def clean_html_content(html_content):
    """L√†m s·∫°ch n·ªôi dung HTML"""
    if not html_content:
        return ""
    
    # Lo·∫°i b·ªè c√°c th·∫ª HTML
    clean_text = re.sub(r'<[^>]+>', '', html_content)
    # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
    clean_text = re.sub(r'\s+', ' ', clean_text).strip()
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
    clean_text = re.sub(r'&#\d+;', '', clean_text)
    
    return clean_text

def extract_keywords_from_content(content, title=""):
    """Tr√≠ch xu·∫•t keywords t·ª´ n·ªôi dung"""
    if not content and not title:
        return ""
    
    text = f"{title} {content}".lower()
    
    # Keywords li√™n quan ƒë·∫øn casino/bonus
    casino_keywords = [
        'casino', 'bonus', 'free spins', 'jackpot', 'slot', 'poker', 
        'blackjack', 'roulette', 'baccarat', 'gaming', 'bet', 'win',
        'deposit', 'withdraw', 'promotion', 'offer', 'deal', 'philippines',
        'gcash', 'maya', 'signup', 'register', 'no deposit'
    ]
    
    found_keywords = [kw for kw in casino_keywords if kw in text]
    return ", ".join(found_keywords[:8])  # Gi·ªõi h·∫°n 8 keywords

def get_existing_titles(worksheet):
    """L·∫•y danh s√°ch titles ƒë√£ c√≥ trong sheet ƒë·ªÉ tr√°nh tr√πng l·∫∑p"""
    try:
        titles = worksheet.col_values(3)  # C·ªôt 3 l√† Title
        return titles[1:] if len(titles) > 1 else []
    except Exception as e:
        print(f"L·ªói khi l·∫•y danh s√°ch titles: {e}")
        return []

def create_or_get_worksheet(spreadsheet, sheet_name):
    """T·∫°o ho·∫∑c l·∫•y worksheet"""
    try:
        worksheet = spreadsheet.worksheet(sheet_name)
        print(f"‚úÖ ƒê√£ t√¨m th·∫•y sheet '{sheet_name}'")
        return worksheet
    except gspread.WorksheetNotFound:
        print(f"T·∫°o sheet m·ªõi: '{sheet_name}'")
        worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=1000, cols=15)
        
        # Th√™m header
        headers = [
            'Source_Title', 'Status', 'Title', 'Content', 'Original_URL', 
            'Image_URL', 'Meta_Title', 'Meta_Desc', 'Import_Date', 
            'Keywords', 'Category', 'Tags', 'Author', 'Notes', 'Custom_Field'
        ]
        worksheet.append_row(headers)
        print(f"‚úÖ ƒê√£ t·∫°o sheet '{sheet_name}' v·ªõi headers")
        return worksheet

def import_with_ai_processing(json_file):
    """Import d·ªØ li·ªáu v·ªõi AI x·ª≠ l√Ω content"""
    
    # Ki·ªÉm tra OpenAI API
    openai_client = setup_openai()
    if not openai_client:
        return
    
    # ƒê·ªçc d·ªØ li·ªáu JSON
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            posts = json.load(f)
        
        if not isinstance(posts, list):
            print("File JSON kh√¥ng ph·∫£i l√† m·∫£ng posts")
            return
            
        print(f"T·ªïng s·ªë b√†i posts: {len(posts)}")
        
    except FileNotFoundError:
        print(f"Kh√¥ng t√¨m th·∫•y file {json_file}")
        return
    except json.JSONDecodeError as e:
        print(f"L·ªói ƒë·ªçc file JSON: {e}")
        return

    # Thi·∫øt l·∫≠p Google Sheets
    spreadsheet = setup_google_sheets()
    if not spreadsheet:
        return
    
    # T·∫°o t√™n sheet t·ª´ filename
    sheet_name = json_file.replace('.json', '').replace('_posts', '').replace('_', '').title()
    worksheet = create_or_get_worksheet(spreadsheet, sheet_name)
    
    # L·∫•y danh s√°ch titles ƒë√£ c√≥
    existing_titles = get_existing_titles(worksheet)
    print(f"ƒê√£ c√≥ {len(existing_titles)} b√†i trong sheet")
    
    # T√¨m c√°c b√†i ch∆∞a ƒë∆∞·ª£c import
    remaining_posts = []
    for post in posts:
        title = post.get('title', '').strip()
        if title and title not in existing_titles:
            remaining_posts.append(post)
    
    print(f"S·ªë b√†i c·∫ßn import v√† x·ª≠ l√Ω AI: {len(remaining_posts)}")
    
    if not remaining_posts:
        print("T·∫•t c·∫£ b√†i ƒë√£ ƒë∆∞·ª£c import!")
        return
    
    # Import t·ª´ng b√†i v·ªõi AI processing
    imported_count = 0
    total_remaining = len(remaining_posts)
    
    for i, post in enumerate(remaining_posts, 1):
        try:
            title = post.get('title', 'No title')
            print(f"\n[{i}/{total_remaining}] ƒêang x·ª≠ l√Ω: {title[:50]}...")
            
            # X·ª≠ l√Ω content b·∫±ng AI
            original_content = post.get('content', '')
            print("ü§ñ ƒêang x·ª≠ l√Ω content b·∫±ng ChatGPT...")
            ai_processed_content = process_content_with_ai(openai_client, original_content, title)
            
            # L·∫•y URL ·∫£nh featured
            featured_image_url = post.get('featured_image', '')
            
            # T·∫°o d·ªØ li·ªáu row
            row_data = [
                sheet_name,           # Source_Title
                'completed',          # Status
                title,               # Title
                ai_processed_content, # Content (ƒë√£ ƒë∆∞·ª£c AI x·ª≠ l√Ω)
                post.get('link', ''), # Original_URL
                featured_image_url,   # Image_URL
                title,               # Meta_Title
                ai_processed_content[:160] + "..." if len(ai_processed_content) > 160 else ai_processed_content,  # Meta_Desc
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),  # Import_Date
                extract_keywords_from_content(ai_processed_content, title),  # Keywords
                'Casino',            # Category
                'bonus, casino, ai-enhanced',  # Tags
                'AI Enhanced',       # Author
                f'AI processed from {json_file}',  # Notes
                'ChatGPT-3.5'       # Custom_Field
            ]
            
            # Th√™m v√†o sheet v·ªõi retry mechanism
            retry_count = 0
            max_retries = 3
            
            while retry_count < max_retries:
                try:
                    worksheet.append_row(row_data)
                    imported_count += 1
                    print(f"‚úÖ ƒê√£ import th√†nh c√¥ng b√†i {i}/{total_remaining}")
                    break
                    
                except Exception as e:
                    retry_count += 1
                    if "quota" in str(e).lower() or "429" in str(e):
                        print(f"‚ö†Ô∏è Rate limit detected, waiting 15 seconds... (retry {retry_count}/{max_retries})")
                        time.sleep(15)
                    else:
                        print(f"‚ùå L·ªói import b√†i {i}: {e}")
                        if retry_count < max_retries:
                            print(f"Th·ª≠ l·∫°i sau 5 gi√¢y... (retry {retry_count}/{max_retries})")
                            time.sleep(5)
                        else:
                            print(f"B·ªè qua b√†i n√†y sau {max_retries} l·∫ßn th·ª≠")
                            break
            
            # Delay gi·ªØa c√°c b√†i ƒë·ªÉ tr√°nh rate limit v√† cho ph√©p AI x·ª≠ l√Ω
            if i < total_remaining:
                print(f"Ch·ªù 8 gi√¢y tr∆∞·ªõc khi x·ª≠ l√Ω b√†i ti·∫øp theo...")
                time.sleep(8)
                
        except KeyboardInterrupt:
            print(f"\n‚ö†Ô∏è Ng∆∞·ªùi d√πng d·ª´ng qu√° tr√¨nh. ƒê√£ import {imported_count}/{total_remaining} b√†i.")
            break
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën khi x·ª≠ l√Ω b√†i {i}: {e}")
            continue
    
    print(f"\nüéâ Ho√†n th√†nh! ƒê√£ import v√† x·ª≠ l√Ω AI cho {imported_count}/{total_remaining} b√†i.")
    print(f"T·∫•t c·∫£ content ƒë√£ ƒë∆∞·ª£c ChatGPT c·∫£i thi·ªán v√† t·ªëi ∆∞u!")

if __name__ == "__main__":
    print("=== IMPORT D·ªÆ LI·ªÜU V·ªöI AI X·ª¨ L√ù CONTENT ===")
    
    # Nh·∫≠p t√™n file JSON
    json_file = input("Nh·∫≠p t√™n file JSON (v√≠ d·ª•: bonus365casinoall_posts.json): ").strip()
    if not json_file:
        json_file = "bonus365casinoall_posts.json"  # Default
    
    print(f"B·∫Øt ƒë·∫ßu import v√† x·ª≠ l√Ω AI cho file: {json_file}")
    import_with_ai_processing(json_file)
    print("Script ho√†n th√†nh!")
