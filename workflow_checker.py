#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
COMPREHENSIVE WORKFLOW CHECKER
Ki·ªÉm tra t·ª´ng b∆∞·ªõc trong quy tr√¨nh WordPress Automation
"""

import os
import sys
import traceback
from datetime import datetime

def print_step(step_num, title, status=""):
    print(f"\n{'='*60}")
    print(f"B∆Ø·ªöC {step_num}: {title}")
    print(f"{'='*60}")
    if status:
        print(f"Tr·∫°ng th√°i: {status}")

def check_environment():
    """B∆∞·ªõc 1: Ki·ªÉm tra m√¥i tr∆∞·ªùng Python"""
    print_step(1, "KI·ªÇM TRA M√îI TR∆Ø·ªúNG PYTHON")
    
    try:
        print(f"‚úÖ Python version: {sys.version}")
        print(f"‚úÖ Working directory: {os.getcwd()}")
        print(f"‚úÖ Virtual environment: {sys.prefix}")
        
        # Ki·ªÉm tra th∆∞ vi·ªán quan tr·ªçng
        libraries = {
            'openai': 'OpenAI API',
            'google.generativeai': 'Google Gemini API', 
            'gspread': 'Google Sheets API',
            'requests': 'HTTP requests',
            'dotenv': 'Environment variables'
        }
        
        print(f"\nüì¶ KI·ªÇM TRA TH·ª¶ VI·ªÜN:")
        for lib, desc in libraries.items():
            try:
                __import__(lib)
                print(f"‚úÖ {desc}: ƒê√£ c√†i ƒë·∫∑t")
            except ImportError:
                print(f"‚ùå {desc}: Ch∆∞a c√†i ƒë·∫∑t")
                
        return True
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra m√¥i tr∆∞·ªùng: {e}")
        return False

def check_config_files():
    """B∆∞·ªõc 2: Ki·ªÉm tra file c·∫•u h√¨nh"""
    print_step(2, "KI·ªÇM TRA FILE C·∫§U H√åNH")
    
    files_to_check = {
        '.env': 'Environment variables',
        'config.py': 'Main configuration',
        'strong-augury-467706-b4-fa91bb781d0a.json': 'Google Service Account credentials'
    }
    
    all_good = True
    for file, desc in files_to_check.items():
        if os.path.exists(file):
            size = os.path.getsize(file)
            print(f"‚úÖ {desc}: {file} ({size} bytes)")
        else:
            print(f"‚ùå {desc}: {file} - KH√îNG T·ªíN T·∫†I")
            all_good = False
    
    return all_good

def check_env_variables():
    """B∆∞·ªõc 3: Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng"""
    print_step(3, "KI·ªÇM TRA BI·∫æN M√îI TR∆Ø·ªúNG")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        required_vars = {
            'OPENAI_API_KEY': 'OpenAI API Key',
            'GEMINI_API_KEY': 'Google Gemini API Key',
            'WP_URL': 'WordPress URL',
            'WP_USERNAME': 'WordPress Username', 
            'WP_PASSWORD': 'WordPress Password',
            'GOOGLE_SHEET_ID': 'Google Sheet ID',
            'GOOGLE_CREDS_FILE': 'Google Credentials File'
        }
        
        all_configured = True
        for var, desc in required_vars.items():
            value = os.getenv(var)
            if value:
                # ·∫®n m·ªôt ph·∫ßn gi√° tr·ªã nh·∫°y c·∫£m
                if 'KEY' in var or 'PASSWORD' in var:
                    display_value = f"{value[:10]}...{value[-4:]}" if len(value) > 14 else "***"
                else:
                    display_value = value
                print(f"‚úÖ {desc}: {display_value}")
            else:
                print(f"‚ùå {desc}: CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH")
                all_configured = False
        
        return all_configured
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra env variables: {e}")
        return False

def check_google_sheets():
    """B∆∞·ªõc 4: Ki·ªÉm tra k·∫øt n·ªëi Google Sheets"""
    print_step(4, "KI·ªÇM TRA GOOGLE SHEETS")
    
    try:
        from sheets_helper import SheetsHelper
        sheets = SheetsHelper()
        
        # Test ƒë·ªçc d·ªØ li·ªáu
        pending = sheets.get_pending_rows()
        print(f"‚úÖ K·∫øt n·ªëi Google Sheets th√†nh c√¥ng")
        print(f"üìä T√¨m th·∫•y {len(pending)} h√†ng pending")
        
        # Hi·ªÉn th·ªã 3 h√†ng ƒë·∫ßu
        for i, row in enumerate(pending[:3], 1):
            prompt = row.get('prompt', '')[:50]
            print(f"   {i}. H√†ng {row['row_number']}: {prompt}...")
        
        return True
    except Exception as e:
        print(f"‚ùå L·ªói Google Sheets: {e}")
        return False

def check_ai_apis():
    """B∆∞·ªõc 5: Ki·ªÉm tra AI APIs"""
    print_step(5, "KI·ªÇM TRA AI APIs")
    
    try:
        from ai_helper import AIHelper
        ai = AIHelper()
        
        # Test OpenAI
        try:
            result = ai.generate_content("Test ng·∫Øn", provider='openai')
            if result and result.get('title'):
                print(f"‚úÖ OpenAI API: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
                print(f"   Sample title: {result['title'][:50]}...")
            else:
                print(f"‚ùå OpenAI API: Kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá")
        except Exception as e:
            print(f"‚ùå OpenAI API: {e}")
        
        # Test Gemini
        try:
            result = ai.generate_content("Test ng·∫Øn", provider='gemini')
            if result and result.get('title'):
                print(f"‚úÖ Gemini API: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
                print(f"   Sample title: {result['title'][:50]}...")
            else:
                print(f"‚ùå Gemini API: Kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£ h·ª£p l·ªá")
        except Exception as e:
            print(f"‚ùå Gemini API: {e}")
        
        # Test Image Generation
        try:
            image_url = ai.generate_image("test image prompt")
            if image_url:
                print(f"‚úÖ Image Generation: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
                print(f"   Sample URL: {image_url[:50]}...")
            else:
                print(f"‚ùå Image Generation: Kh√¥ng sinh ƒë∆∞·ª£c ·∫£nh")
        except Exception as e:
            print(f"‚ùå Image Generation: {e}")
            
        return True
    except Exception as e:
        print(f"‚ùå L·ªói AI APIs: {e}")
        return False

def check_wordpress():
    """B∆∞·ªõc 6: Ki·ªÉm tra WordPress API"""
    print_step(6, "KI·ªÇM TRA WORDPRESS API")
    
    try:
        from wp_helper import WPHelper
        wp = WPHelper()
        
        # Test t·∫°o b√†i vi·∫øt
        print(f"‚úÖ WordPress API: K·∫øt n·ªëi th√†nh c√¥ng")
        
        # L·∫•y th√¥ng tin user
        import requests
        from config import Config
        
        response = requests.get(
            f"{Config.WP_API_URL}/users/me",
            auth=(Config.WP_USERNAME, Config.WP_PASSWORD)
        )
        
        if response.status_code == 200:
            user_info = response.json()
            print(f"‚úÖ User info: {user_info.get('name', 'Unknown')}")
            print(f"‚úÖ Capabilities: {len(user_info.get('capabilities', {}))} permissions")
        
        return True
    except Exception as e:
        print(f"‚ùå L·ªói WordPress API: {e}")
        return False

def check_workflow_readiness():
    """B∆∞·ªõc 7: Ki·ªÉm tra s·∫µn s√†ng workflow"""
    print_step(7, "KI·ªÇM TRA S·∫¥N S√ÄNG WORKFLOW")
    
    try:
        from main import WordPressAutomation
        automation = WordPressAutomation()
        
        print(f"‚úÖ Main workflow: Kh·ªüi t·∫°o th√†nh c√¥ng")
        print(f"‚úÖ All components: ƒê√£ s·∫µn s√†ng")
        
        return True
    except Exception as e:
        print(f"‚ùå L·ªói workflow: {e}")
        return False

def generate_action_plan(results):
    """T·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông d·ª±a tr√™n k·∫øt qu·∫£ ki·ªÉm tra"""
    print_step("FINAL", "K·∫æ HO·∫†CH H√ÄNH ƒê·ªòNG")
    
    failed_steps = [i+1 for i, result in enumerate(results) if not result]
    
    if not failed_steps:
        print("üéâ T·∫§T C·∫¢ B∆Ø·ªöC ƒê√É HO√ÄN H·∫¢O!")
        print("\n‚úÖ H·ªá th·ªëng s·∫µn s√†ng s·ª≠ d·ª•ng:")
        print("   - Ch·∫°y: python main.py single (test 1 b√†i)")
        print("   - Ch·∫°y: python main.py batch 3 (test 3 b√†i)")
        print("   - Ch·∫°y: run_batch.bat (t·ª± ƒë·ªông)")
        return
    
    print(f"‚ö†Ô∏è C·∫¶N KH·∫ÆC PH·ª§C {len(failed_steps)} B∆Ø·ªöC:")
    
    action_plans = {
        1: """
        üîß S·ª¨A L·ªñI M√îI TR∆Ø·ªúNG PYTHON:
        - C√†i ƒë·∫∑t Python 3.10+
        - T·∫°o virtual environment: python -m venv .venv
        - Activate: .venv\\Scripts\\activate
        - C√†i th∆∞ vi·ªán: pip install -r requirements.txt
        """,
        2: """
        üìÅ S·ª¨A L·ªñI FILE C·∫§U H√åNH:
        - T·∫°o file .env v·ªõi API keys
        - Download Google Service Account JSON
        - ƒê·∫∑t t√™n: strong-augury-467706-b4-fa91bb781d0a.json
        """,
        3: """
        ‚öôÔ∏è S·ª¨A L·ªñI BI·∫æN M√îI TR∆Ø·ªúNG:
        - Ki·ªÉm tra file .env
        - C·∫≠p nh·∫≠t t·∫•t c·∫£ API keys
        - Ki·ªÉm tra WordPress credentials
        """,
        4: """
        üìä S·ª¨A L·ªñI GOOGLE SHEETS:
        - Ki·ªÉm tra Google Service Account
        - Chia s·∫ª Sheet v·ªõi email Service Account
        - Ki·ªÉm tra GOOGLE_SHEET_ID
        """,
        5: """
        ü§ñ S·ª¨A L·ªñI AI APIs:
        - Ki·ªÉm tra OpenAI API key v√† credit
        - Ki·ªÉm tra Gemini API key
        - Test t·ª´ng API ri√™ng l·∫ª
        """,
        6: """
        üì§ S·ª¨A L·ªñI WORDPRESS:
        - Ki·ªÉm tra WP_URL c√≥ ƒë√∫ng kh√¥ng
        - T·∫°o l·∫°i Application Password
        - Ki·ªÉm tra REST API enabled
        """,
        7: """
        üîÑ S·ª¨A L·ªñI WORKFLOW:
        - Kh·∫Øc ph·ª•c t·∫•t c·∫£ l·ªói tr√™n tr∆∞·ªõc
        - Restart Python environment
        - Test l·∫°i t·ª´ng component
        """
    }
    
    for step in failed_steps:
        print(action_plans.get(step, f"Ki·ªÉm tra l·∫°i b∆∞·ªõc {step}"))

def main():
    """Main checker function"""
    print("üîç WORDPRESS AUTOMATION - WORKFLOW CHECKER")
    print("=" * 60)
    print(f"Th·ªùi gian ki·ªÉm tra: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Danh s√°ch t·∫•t c·∫£ b∆∞·ªõc ki·ªÉm tra
    checks = [
        check_environment,
        check_config_files, 
        check_env_variables,
        check_google_sheets,
        check_ai_apis,
        check_wordpress,
        check_workflow_readiness
    ]
    
    results = []
    
    # Ch·∫°y t·ª´ng b∆∞·ªõc
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Exception trong {check.__name__}: {e}")
            traceback.print_exc()
            results.append(False)
    
    # T·∫°o k·∫ø ho·∫°ch h√†nh ƒë·ªông
    generate_action_plan(results)
    
    # T·ªïng k·∫øt
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüìà T·ªîNG K·∫æT: {success_count}/{total_count} b∆∞·ªõc ho√†n th√†nh")
    print(f"üìä T·ª∑ l·ªá th√†nh c√¥ng: {success_count/total_count*100:.1f}%")
    
    if success_count == total_count:
        print("üéØ H·ªÜ TH·ªêNG S·∫¥N S√ÄNG HO√ÄN H·∫¢O!")
    else:
        print("‚ö†Ô∏è C·∫¶N KH·∫ÆC PH·ª§C M·ªòT S·ªê V·∫§N ƒê·ªÄ")

if __name__ == "__main__":
    main()
