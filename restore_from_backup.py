#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KH√îI PH·ª§C D·ª∞ √ÅN T·ª™ BACKUP
Restore project t·ª´ backup CSV v√† thi·∫øt l·∫≠p l·∫°i to√†n b·ªô h·ªá th·ªëng
"""

import os
import subprocess
import sys
from datetime import datetime

import mysql.connector
import pandas as pd
from mysql.connector import Error


class BackupRestorer:
    """Kh√¥i ph·ª•c d·ª± √°n t·ª´ backup"""

    def __init__(self):
        self.backup_csv = "c:\\Users\\Admin\\Downloads\\posts.csv"
        self.connection = None

    def connect_database(self):
        """K·∫øt n·ªëi database"""
        try:
            self.connection = mysql.connector.connect(
                host="localhost",
                port=3308,
                user="root",
                password="baivietwp_password",
                database="mydb",
                charset="utf8mb4",
                autocommit=True,
            )

            if self.connection.is_connected():
                print("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng")
                return True
            else:
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MySQL")
                return False

        except Error as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
            return False

    def check_backup_file(self):
        """Ki·ªÉm tra file backup"""
        if not os.path.exists(self.backup_csv):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file backup: {self.backup_csv}")
            print("üìÅ Vui l√≤ng ƒë·∫£m b·∫£o file posts.csv ·ªü ƒë√∫ng v·ªã tr√≠")
            return False

        try:
            df = pd.read_csv(self.backup_csv)
            print(f"‚úÖ File backup h·ª£p l·ªá: {len(df)} records")
            print(f"üìä Columns: {list(df.columns)}")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file backup: {e}")
            return False

    def create_tables(self):
        """T·∫°o l·∫°i c√°c b·∫£ng c·∫ßn thi·∫øt"""
        try:
            cursor = self.connection.cursor()

            # T·∫°o b·∫£ng posts
            posts_sql = """
            CREATE TABLE IF NOT EXISTS posts (
                id INT AUTO_INCREMENT PRIMARY KEY,
                source_title VARCHAR(255),
                status VARCHAR(50),
                title VARCHAR(500) NOT NULL,
                content TEXT,
                original_url TEXT,
                image_url TEXT,
                meta_title VARCHAR(255),
                meta_description TEXT,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                keywords TEXT,
                category VARCHAR(100),
                tags TEXT,
                ai_model VARCHAR(50),
                notes TEXT,
                processing_status VARCHAR(50)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
            """

            cursor.execute(posts_sql)
            print("‚úÖ B·∫£ng 'posts' ƒë√£ s·∫µn s√†ng")

            # T·∫°o b·∫£ng posts_ai
            posts_ai_sql = """
            CREATE TABLE IF NOT EXISTS posts_ai (
                id INT AUTO_INCREMENT PRIMARY KEY,
                post_id INT NOT NULL,
                title VARCHAR(500) NOT NULL,
                ai_content TEXT NOT NULL,
                meta_title VARCHAR(255),
                meta_description VARCHAR(300),
                image_url TEXT,
                image_prompt TEXT,
                tags TEXT,
                category VARCHAR(100),
                ai_model VARCHAR(50),
                ai_notes TEXT,
                processing_status ENUM('processing', 'completed', 'error') DEFAULT 'processing',
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                UNIQUE KEY unique_post_id (post_id),
                FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
            """

            cursor.execute(posts_ai_sql)
            print("‚úÖ B·∫£ng 'posts_ai' ƒë√£ s·∫µn s√†ng")

            cursor.close()
            return True

        except Error as e:
            print(f"‚ùå L·ªói t·∫°o b·∫£ng: {e}")
            return False

    def import_data_from_backup(self):
        """Import d·ªØ li·ªáu t·ª´ backup CSV"""
        try:
            # ƒê·ªçc CSV
            df = pd.read_csv(self.backup_csv)

            cursor = self.connection.cursor()

            # X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)
            cursor.execute("DELETE FROM posts_ai")
            cursor.execute("DELETE FROM posts")
            cursor.execute("ALTER TABLE posts AUTO_INCREMENT = 1")
            print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©")

            # Insert d·ªØ li·ªáu posts
            insert_sql = """
            INSERT INTO posts (
                id, source_title, status, title, content, original_url, 
                image_url, meta_title, meta_description, created_date,
                keywords, category, tags, ai_model, notes, processing_status
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """

            imported_count = 0
            for _, row in df.iterrows():
                try:
                    values = (
                        row["id"],
                        row["source_title"],
                        row["status"],
                        row["title"],
                        row["content"],
                        row["original_url"],
                        row["image_url"],
                        row["meta_title"],
                        row["meta_description"],
                        row["created_date"],
                        row["keywords"],
                        row["category"],
                        row["tags"],
                        row["ai_model"],
                        row["notes"],
                        row["processing_status"],
                    )

                    cursor.execute(insert_sql, values)
                    imported_count += 1

                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói import row {row.get('id', '?')}: {e}")
                    continue

            cursor.close()

            print(f"‚úÖ Import th√†nh c√¥ng {imported_count}/{len(df)} posts")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói import d·ªØ li·ªáu: {e}")
            return False

    def verify_data(self):
        """X√°c minh d·ªØ li·ªáu sau khi import"""
        try:
            cursor = self.connection.cursor(dictionary=True)

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng posts
            cursor.execute("SELECT COUNT(*) as total FROM posts")
            total_posts = cursor.fetchone()["total"]

            # Ki·ªÉm tra posts_ai
            cursor.execute("SELECT COUNT(*) as processed FROM posts_ai")
            processed_posts = cursor.fetchone()["processed"]

            # L·∫•y v√†i posts m·∫´u
            cursor.execute("SELECT id, title, category FROM posts LIMIT 3")
            sample_posts = cursor.fetchall()

            cursor.close()

            print(f"\nüìä KI·ªÇM TRA D·ªÆ LI·ªÜU:")
            print(f"   T·ªïng posts: {total_posts}")
            print(f"   ƒê√£ AI processing: {processed_posts}")
            print(f"   Ch∆∞a x·ª≠ l√Ω: {total_posts - processed_posts}")

            print(f"\nüìù Sample posts:")
            for post in sample_posts:
                print(f"   #{post['id']}: {post['title'][:50]}... [{post['category']}]")

            return True

        except Error as e:
            print(f"‚ùå L·ªói verify d·ªØ li·ªáu: {e}")
            return False

    def test_ai_processor(self):
        """Test AI Content Processor"""
        try:
            print(f"\nüß™ TESTING AI PROCESSOR:")

            # Test import
            result = subprocess.run(
                [
                    "python",
                    "-c",
                    "from ai_content_processor import AIContentProcessor; print('‚úÖ Import OK')",
                ],
                capture_output=True,
                text=True,
                timeout=10,
            )

            if result.returncode == 0:
                print("   ‚úÖ AI Processor import: OK")
            else:
                print(f"   ‚ùå AI Processor import failed: {result.stderr}")
                return False

            # Test basic functionality
            result = subprocess.run(
                ["python", "ai_content_processor.py", "stats"],
                capture_output=True,
                text=True,
                timeout=30,
            )

            if "total_posts" in result.stdout:
                print("   ‚úÖ AI Processor functionality: OK")
                return True
            else:
                print("   ‚ùå AI Processor functionality failed")
                return False

        except Exception as e:
            print(f"   ‚ùå Test AI Processor error: {e}")
            return False

    def create_quick_start_guide(self):
        """T·∫°o h∆∞·ªõng d·∫´n kh·ªüi ƒë·ªông nhanh"""
        guide = """# üöÄ H∆Ø·ªöNG D·∫™N KH·ªûI ƒê·ªòNG L·∫†I D·ª∞ √ÅN

## ‚úÖ D·ªÆ LI·ªÜU ƒê√É KH√îI PH·ª§C TH√ÄNH C√îNG!

### üìä Tr·∫°ng th√°i hi·ªán t·∫°i:
- ‚úÖ Database MySQL: Connected (localhost:3308)
- ‚úÖ B·∫£ng posts: ƒê√£ c√≥ d·ªØ li·ªáu t·ª´ backup
- ‚úÖ B·∫£ng posts_ai: S·∫µn s√†ng ƒë·ªÉ AI processing
- ‚úÖ AI Content Processor: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng

### üéØ C√ÅC L·ªÜNH C∆† B·∫¢N:

#### 1. Xem th·ªëng k√™:
```bash
python ai_content_processor.py stats
```

#### 2. Test v·ªõi 1 post:
```bash  
python ai_content_processor.py single
```

#### 3. X·ª≠ l√Ω batch:
```bash
python ai_content_processor.py batch 5 1.0
# (5 posts, delay 1 gi√¢y)
```

#### 4. Interactive menu:
```bash
python ai_content_processor.py
```

### üîß Files ch√≠nh:
- `ai_content_processor.py` - Main processor
- `config.py` - OpenAI API configuration  
- Database: `mydb` on localhost:3308

### üéâ D·ª∞ √ÅN S·∫¥N S√ÄNG S·ª¨ D·ª§NG!

Ch·∫°y: `python ai_content_processor.py` ƒë·ªÉ b·∫Øt ƒë·∫ßu!
"""

        with open("QUICK_START_RESTORED.md", "w", encoding="utf-8") as f:
            f.write(guide)

        print("‚úÖ T·∫°o h∆∞·ªõng d·∫´n: QUICK_START_RESTORED.md")

    def restore_project(self):
        """Kh√¥i ph·ª•c to√†n b·ªô d·ª± √°n"""
        print("üîÑ B·∫ÆT ƒê·∫¶U KH√îI PH·ª§C D·ª∞ √ÅN T·ª™ BACKUP")
        print("=" * 50)

        # Step 1: Check backup file
        if not self.check_backup_file():
            return False

        # Step 2: Connect database
        if not self.connect_database():
            return False

        # Step 3: Create tables
        if not self.create_tables():
            return False

        # Step 4: Import data
        if not self.import_data_from_backup():
            return False

        # Step 5: Verify data
        if not self.verify_data():
            return False

        # Step 6: Test AI processor
        if not self.test_ai_processor():
            print("‚ö†Ô∏è AI Processor test failed, nh∆∞ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c restore")

        # Step 7: Create guide
        self.create_quick_start_guide()

        print(f"\nüéâ KH√îI PH·ª§C TH√ÄNH C√îNG!")
        print("=" * 30)
        print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c import t·ª´ backup")
        print("‚úÖ Database ƒë√£ s·∫µn s√†ng")
        print("‚úÖ AI Content Processor ho·∫°t ƒë·ªông")
        print("\nüöÄ Ch·∫°y: python ai_content_processor.py")

        return True

    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        if self.connection and self.connection.is_connected():
            self.connection.close()


def main():
    """Main function"""
    try:
        restorer = BackupRestorer()

        # Ki·ªÉm tra xem c√≥ mu·ªën restore kh√¥ng
        print("üîÑ KH√îI PH·ª§C D·ª∞ √ÅN T·ª™ BACKUP CSV")
        print("=" * 40)
        print("‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω X√ìA d·ªØ li·ªáu hi·ªán t·∫°i!")
        print("üìÅ Backup file: c:\\Users\\Admin\\Downloads\\posts.csv")

        confirm = (
            input("\n‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c t·ª´ backup? (yes/no): ")
            .lower()
            .strip()
        )

        if confirm in ["yes", "y"]:
            if restorer.restore_project():
                print("\nüéâ HO√ÄN TH√ÄNH! D·ª± √°n ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng!")

                # H·ªèi c√≥ mu·ªën ch·∫°y test kh√¥ng
                test = input("\nüß™ Mu·ªën ch·∫°y test ngay? (y/n): ").lower().strip()
                if test in ["y", "yes"]:
                    os.system("python ai_content_processor.py stats")
            else:
                print("\n‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i!")
        else:
            print("\n‚úã ƒê√£ h·ªßy kh√¥i ph·ª•c")

        restorer.close()

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")


if __name__ == "__main__":
    main()
