#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ti·∫øp t·ª•c nh·∫≠p d·ªØ li·ªáu c√≤n l·∫°i v√†o sheet (kh·∫Øc ph·ª•c rate limit)
"""

import json
import sys
import os
from pathlib import Path
import re
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import time

sys.path.append(str(Path.cwd()))

try:
    from config import Config
    
    def clean_html_content(html_content):
        if not html_content:
            return ""
        clean_content = html_content.strip()
        clean_content = re.sub(r'\t+', '', clean_content)
        clean_content = re.sub(r'\n+', '\n', clean_content)
        return clean_content
    
    def extract_keywords_from_content(title, content):
        text = f"{title} {content}".lower()
        keywords = []
        keyword_patterns = [
            'free bonus', 'casino bonus', 'sign up bonus', 'no deposit',
            'online casino', '100 bonus', 'registration', 'gcash',
            'masaya', 'philippines', 'deposit', 'cashback', 'casino',
            'betting', 'gambling', 'slots', 'games'
        ]
        for pattern in keyword_patterns:
            if pattern in text:
                keywords.append(pattern)
        return ', '.join(keywords[:8])
    
    def create_meta_description(title, content):
        if not content:
            return f"T√¨m hi·ªÉu v·ªÅ {title}. H∆∞·ªõng d·∫´n chi ti·∫øt v√† c·∫≠p nh·∫≠t m·ªõi nh·∫•t."
        clean_text = re.sub(r'<[^>]+>', '', content)
        clean_text = re.sub(r'\s+', ' ', clean_text).strip()
        if len(clean_text) > 150:
            meta_desc = clean_text[:147] + "..."
        else:
            meta_desc = clean_text
        return meta_desc
    
    # L·∫•y tham s·ªë
    if len(sys.argv) > 1:
        json_file = sys.argv[1]
        skip_count = int(sys.argv[2]) if len(sys.argv) > 2 else 67
    else:
        json_file = "bonus365casinoall_posts.json"
        skip_count = 67
    
    sheet_name = "Bonus365casinoall"
    
    print("=" * 80)
    print(f"TI·∫æP T·ª§C NH·∫¨P D·ªÆ LI·ªÜU V√ÄO SHEET '{sheet_name}'")
    print(f"B·ªé QUA {skip_count} B√ÄI ƒê√É NH·∫¨P, NH·∫¨P PH·∫¶N C√íN L·∫†I")
    print("=" * 80)
    
    # ƒê·ªçc file JSON
    with open(json_file, 'r', encoding='utf-8') as f:
        posts_data = json.load(f)
    
    print(f"üìä T·ªïng {len(posts_data)} b√†i, b·ªè qua {skip_count} b√†i ƒë√£ nh·∫≠p")
    
    # K·∫øt n·ªëi Google Sheets
    scope = [
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/drive'
    ]
    
    creds = Credentials.from_service_account_file(
        Config.GOOGLE_CREDS_FILE, 
        scopes=scope
    )
    
    gc = gspread.authorize(creds)
    spreadsheet = gc.open_by_key(Config.GOOGLE_SHEET_ID)
    worksheet = spreadsheet.worksheet(sheet_name)
    
    print(f"‚úÖ K·∫øt n·ªëi sheet '{sheet_name}' th√†nh c√¥ng")
    
    # X·ª≠ l√Ω ph·∫ßn c√≤n l·∫°i
    remaining_posts = posts_data[skip_count:]
    print(f"üìã C√≤n l·∫°i {len(remaining_posts)} b√†i c·∫ßn nh·∫≠p")
    
    processed_data = []
    for i, post in enumerate(remaining_posts):
        title = post.get('title', '').strip()
        content = post.get('content', '').strip()
        link = post.get('link', '').strip()
        featured_image = post.get('featured_image', '').strip()
        
        if title and len(title) > 5:
            clean_content = clean_html_content(content)
            keywords = extract_keywords_from_content(title, content)
            meta_desc = create_meta_description(title, content)
            
            processed_data.append({
                'source_title': f"Import: {title}",
                'title': title,
                'content': clean_content,
                'original_url': link,
                'image_url': featured_image,
                'keywords': keywords,
                'meta_title': f"{title} | Casino Guide",
                'meta_desc': meta_desc,
                'status': 'completed',
                'source': os.path.basename(json_file).replace('.json', ''),
                'category': 'Casino',
                'import_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })
    
    print(f"‚úÖ X·ª≠ l√Ω ƒë∆∞·ª£c {len(processed_data)} b√†i vi·∫øt h·ª£p l·ªá")
    
    if processed_data:
        user_input = input(f"\n‚ùì Ti·∫øp t·ª•c nh·∫≠p {len(processed_data)} b√†i c√≤n l·∫°i? (y/n): ")
        
        if user_input.lower() in ['y', 'yes', 'c√≥']:
            print(f"\nüîÑ Nh·∫≠p v·ªõi delay ƒë·ªÉ tr√°nh rate limit...")
            
            success_count = 0
            error_count = 0
            
            for i, data in enumerate(processed_data, 1):
                try:
                    row_data = [
                        data['source_title'],
                        data['status'],
                        data['title'],
                        data['content'],
                        data['original_url'],
                        data['image_url'],
                        data['meta_title'],
                        data['meta_desc'],
                        data['import_date'],
                        data['keywords'],
                        data['category'],
                        f"Source: {data['source']}",
                        "Auto Import",
                        f"Imported from {json_file}",
                        ""
                    ]
                    
                    worksheet.append_row(row_data)
                    success_count += 1
                    
                    if i % 5 == 0:
                        print(f"   ‚úÖ ƒê√£ nh·∫≠p {i}/{len(processed_data)} b√†i...")
                    
                    # Delay 3 gi√¢y m·ªói request ƒë·ªÉ tr√°nh rate limit
                    time.sleep(3)
                    
                except Exception as e:
                    print(f"   ‚ùå L·ªói b√†i {i}: {str(e)}")
                    error_count += 1
                    time.sleep(5)  # Delay l√¢u h∆°n khi c√≥ l·ªói
            
            print(f"\nüéâ HO√ÄN TH√ÄNH NH·∫¨P PH·∫¶N C√íN L·∫†I!")
            print(f"   ‚úÖ Th√†nh c√¥ng: {success_count}/{len(processed_data)}")
            if error_count > 0:
                print(f"   ‚ùå L·ªói: {error_count}")
            print(f"   üìä T·ªïng c·ªông sheet '{sheet_name}': ~{skip_count + success_count} b√†i")

except Exception as e:
    print(f"‚ùå L·ªñI: {str(e)}")
    import traceback
    traceback.print_exc()
