#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KH√îI PH·ª§C D·ª∞ √ÅN ƒê∆†N GI·∫¢N T·ª™ BACKUP
Restore project t·ª´ backup CSV m·ªôt c√°ch ƒë∆°n gi·∫£n
"""

import csv
import os
import sys

import mysql.connector
from mysql.connector import Error


def restore_project_simple():
    """Kh√¥i ph·ª•c d·ª± √°n ƒë∆°n gi·∫£n"""
    print("üîÑ KH√îI PH·ª§C D·ª∞ √ÅN T·ª™ BACKUP CSV")
    print("=" * 40)

    backup_file = "c:\\Users\\Admin\\Downloads\\posts.csv"

    # Ki·ªÉm tra file backup
    if not os.path.exists(backup_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {backup_file}")
        print("üìÅ Vui l√≤ng ƒë·∫£m b·∫£o file posts.csv ·ªü ƒë√∫ng v·ªã tr√≠")
        return False

    print(f"‚úÖ T√¨m th·∫•y file backup: {backup_file}")

    # C·∫£nh b√°o
    print("‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω X√ìA d·ªØ li·ªáu hi·ªán t·∫°i!")
    confirm = input("‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c? (yes/no): ").lower().strip()

    if confirm not in ["yes", "y"]:
        print("‚úã ƒê√£ h·ªßy kh√¥i ph·ª•c")
        return False

    try:
        # K·∫øt n·ªëi database
        print("üîå ƒêang k·∫øt n·ªëi database...")
        conn = mysql.connector.connect(
            host="localhost",
            port=3308,
            user="root",
            password="baivietwp_password",
            database="mydb",
            charset="utf8mb4",
            autocommit=True,
        )

        if not conn.is_connected():
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database")
            return False

        print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng")

        cursor = conn.cursor()

        # T·∫°o b·∫£ng posts n·∫øu ch∆∞a c√≥
        print("üîß T·∫°o b·∫£ng posts...")
        create_posts_sql = """
        CREATE TABLE IF NOT EXISTS posts (
            id INT AUTO_INCREMENT PRIMARY KEY,
            source_title VARCHAR(255),
            status VARCHAR(50),
            title VARCHAR(500) NOT NULL,
            content TEXT,
            original_url TEXT,
            image_url TEXT,
            meta_title VARCHAR(255),
            meta_description TEXT,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            keywords TEXT,
            category VARCHAR(100),
            tags TEXT,
            ai_model VARCHAR(50),
            notes TEXT,
            processing_status VARCHAR(50)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """
        cursor.execute(create_posts_sql)

        # T·∫°o b·∫£ng posts_ai
        print("üîß T·∫°o b·∫£ng posts_ai...")
        create_posts_ai_sql = """
        CREATE TABLE IF NOT EXISTS posts_ai (
            id INT AUTO_INCREMENT PRIMARY KEY,
            post_id INT NOT NULL,
            title VARCHAR(500) NOT NULL,
            ai_content TEXT NOT NULL,
            meta_title VARCHAR(255),
            meta_description VARCHAR(300),
            image_url TEXT,
            image_prompt TEXT,
            tags TEXT,
            category VARCHAR(100),
            ai_model VARCHAR(50),
            ai_notes TEXT,
            processing_status ENUM('processing', 'completed', 'error') DEFAULT 'processing',
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            UNIQUE KEY unique_post_id (post_id)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """
        cursor.execute(create_posts_ai_sql)

        # X√≥a d·ªØ li·ªáu c≈©
        print("üóëÔ∏è X√≥a d·ªØ li·ªáu c≈©...")
        cursor.execute("DELETE FROM posts_ai")
        cursor.execute("DELETE FROM posts")
        cursor.execute("ALTER TABLE posts AUTO_INCREMENT = 1")

        # ƒê·ªçc v√† import CSV
        print("üì• Import d·ªØ li·ªáu t·ª´ backup...")
        with open(backup_file, "r", encoding="utf-8") as csvfile:
            reader = csv.DictReader(csvfile)

            insert_sql = """
            INSERT INTO posts (
                id, source_title, status, title, content, original_url,
                image_url, meta_title, meta_description, created_date,
                keywords, category, tags, ai_model, notes, processing_status
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """

            imported_count = 0
            for row in reader:
                try:
                    values = (
                        int(row["id"]),
                        row["source_title"],
                        row["status"],
                        row["title"],
                        row["content"],
                        row["original_url"],
                        row["image_url"],
                        row["meta_title"],
                        row["meta_description"],
                        row["created_date"],
                        row["keywords"],
                        row["category"],
                        row["tags"],
                        row["ai_model"],
                        row["notes"],
                        row["processing_status"],
                    )

                    cursor.execute(insert_sql, values)
                    imported_count += 1

                    if imported_count % 10 == 0:
                        print(f"   üìä ƒê√£ import {imported_count} posts...")

                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói import row ID {row.get('id', '?')}: {e}")
                    continue

        # Ki·ªÉm tra k·∫øt qu·∫£
        cursor.execute("SELECT COUNT(*) FROM posts")
        total_posts = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM posts_ai")
        processed_posts = cursor.fetchone()[0]

        print(f"\nüìä K·∫æT QU·∫¢ IMPORT:")
        print(f"   ‚úÖ T·ªïng posts: {total_posts}")
        print(f"   üìù ƒê√£ AI processing: {processed_posts}")
        print(f"   ‚è≥ Ch∆∞a x·ª≠ l√Ω: {total_posts - processed_posts}")

        # Sample posts
        cursor.execute("SELECT id, title, category FROM posts LIMIT 3")
        samples = cursor.fetchall()

        print(f"\nüìã Sample posts:")
        for post in samples:
            print(f"   #{post[0]}: {post[1][:50]}... [{post[2]}]")

        cursor.close()
        conn.close()

        print(f"\nüéâ KH√îI PH·ª§C TH√ÄNH C√îNG!")
        print("‚úÖ Database ƒë√£ s·∫µn s√†ng")
        print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c import")

        return True

    except Error as e:
        print(f"‚ùå L·ªói database: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False


def test_ai_processor():
    """Test AI processor sau khi restore"""
    print(f"\nüß™ TESTING AI PROCESSOR...")

    try:
        import subprocess

        # Test stats command
        result = subprocess.run(
            ["python", "ai_content_processor.py", "stats"],
            capture_output=True,
            text=True,
            timeout=30,
        )

        if result.returncode == 0 and "total_posts" in result.stdout:
            print("‚úÖ AI Processor ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
            print("üìä Stats output:")
            for line in result.stdout.split("\n"):
                if (
                    "total_posts" in line
                    or "processed_posts" in line
                    or "unprocessed" in line
                ):
                    print(f"   {line.strip()}")
            return True
        else:
            print("‚ùå AI Processor c√≥ v·∫•n ƒë·ªÅ")
            if result.stderr:
                print(f"Error: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ test AI Processor: {e}")
        return False


def create_startup_guide():
    """T·∫°o h∆∞·ªõng d·∫´n kh·ªüi ƒë·ªông"""
    guide = """# üöÄ D·ª∞ √ÅN ƒê√É ƒê∆Ø·ª¢C KH√îI PH·ª§C!

## ‚úÖ Tr·∫°ng th√°i hi·ªán t·∫°i:
- ‚úÖ Database: Connected (localhost:3308)
- ‚úÖ Posts table: ƒê√£ c√≥ d·ªØ li·ªáu t·ª´ backup
- ‚úÖ Posts_ai table: S·∫µn s√†ng AI processing

## üéØ C√°ch s·ª≠ d·ª•ng:

### 1. Xem th·ªëng k√™:
```bash
python ai_content_processor.py stats
```

### 2. Test 1 post:
```bash
python ai_content_processor.py single
```

### 3. Batch processing:
```bash
python ai_content_processor.py batch 5 1.0
```

### 4. Interactive menu:
```bash
python ai_content_processor.py
```

## üéâ S·∫¥N S√ÄNG S·ª¨ D·ª§NG!
Ch·∫°y: `python ai_content_processor.py` ƒë·ªÉ b·∫Øt ƒë·∫ßu.
"""

    try:
        with open("PROJECT_RESTORED.md", "w", encoding="utf-8") as f:
            f.write(guide)
        print("‚úÖ T·∫°o h∆∞·ªõng d·∫´n: PROJECT_RESTORED.md")
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o guide: {e}")


def main():
    """Main function"""
    try:
        # Kh√¥i ph·ª•c d·ª± √°n
        if restore_project_simple():
            # Test AI processor
            test_ai_processor()

            # T·∫°o guide
            create_startup_guide()

            print(f"\nüéâ HO√ÄN TH√ÄNH!")
            print("=" * 30)
            print("üöÄ Ch·∫°y ngay: python ai_content_processor.py")

            # H·ªèi c√≥ mu·ªën ch·∫°y test kh√¥ng
            run_test = input("\n‚ùì Mu·ªën ch·∫°y test ngay? (y/n): ").lower().strip()
            if run_test in ["y", "yes"]:
                os.system("python ai_content_processor.py stats")
        else:
            print("\n‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i!")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\n‚ùå L·ªói: {e}")


if __name__ == "__main__":
    main()
